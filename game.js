'use strict'
const prompt = require('prompt-sync')();


console.log(`
–ò–≥—Ä–∞ –∑–∞–±–µ—Ä–∏ —Å–≤–æ–µ. –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã: —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å —Ñ–∏—à–∫–∏ —Å–≤–æ–µ–≥–æ —Ü–≤–µ—Ç–∞ 
(–∫–æ–ª-–≤–æ –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ). –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–∏ —Ñ–∏–≥—É—Ä—ã –±—ã—Å—Ç—Ä–µ–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. 
–ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Ñ–∏–≥—É—Ä—ã –∏–∑ –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏ –∏–ª–∏ —Å—Ç–æ–ª–±–∏–∫–∞. `);


let equal = prompt('–°–∫–æ–ª—å–∫–æ —Ñ–∏—à–µ–∫ —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞(–Ω–µ –±–æ–ª—å—à–µ 32)? ');
while (equal>32) equal = prompt('–°–∫–æ–ª—å–∫–æ —Ñ–∏—à–µ–∫ —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞(–Ω–µ –±–æ–ª—å—à–µ 32)? ');

let players = [equal, equal];
let field = make_field(equal);
console.log(`–°—É–ø–µ—Ä, –ø–æ–µ—Ö–∞–ª–∏!
 –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–æ–ª–±–∏–∫ –∏–ª–∏ —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—Ç —Å–æ–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫`);
 console.log('–ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ - üü£')
 console.log('–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ - üîµ')
let player_move;
let turn_order = 0;
do{
    show_field(field);
    player_move = prompt(`–•–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ${turn_order + 1}: `)
    players[turn_order]-=move(player_move)
    turn_order = (turn_order + 1) % 2;
}while(players[0] && players[1])
show_field(field);
console.log(`${(turn_order + 1) % 2 + 1} –∏–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª!`)
//show_field(field);
  



function getRandomInt(max) {
    return Math.floor(Math.random() * max);
}

function make_field(level = 16) {
    let game_field = [];

    for (let a = 0; a < 8; a++) {
        let line_field = [];
        for (let j = 0; j < 8; j++) line_field.push(0);
        game_field.push(line_field);
    }
    level *=2;
    let figure_number = 1; // 1 - –±–µ–ª—ã–µ, 2 - —á–µ—Ä–Ω—ã–µ
    while (level) {
        let coordinates_line = getRandomInt(8);
        let coordinates_column = getRandomInt(8);
        if (game_field[coordinates_column][coordinates_line] == 0) {

            game_field[coordinates_column][coordinates_line] = figure_number;

            if (figure_number == 1) figure_number = 2;
            else figure_number = 1;

            level--
        } else{
            coordinates_line = getRandomInt(8);
            coordinates_column = getRandomInt(8);
        }
    }
    //console.log(game_field);
    return game_field;

}
function move(ord){
    let chip_value = 0;
    if ('abcdefgh'.indexOf(ord)!=-1){
        ord = 'abcdefgh'.indexOf(ord)
        for (let i=0;i<8;i++){
            if (field[i][ord] == turn_order+1){
                field[i][ord] = 0;
                chip_value++   
            } 
        }
    }else{
        ord--
        for (let i=0;i<8;i++){
            if (field[ord][i] == turn_order+1){
                field[ord][i] = 0;
                chip_value++
            } 
        }
    }
    return chip_value
}
function show_field(current_field){
    console.log('  a b c d e f g h ');
    let counter = 0;
    for (let j of current_field){
        let line_field = ++counter;
        for (let k of j){
            if (k == 0) line_field+='‚ö™';
            else if (k==1) line_field+='üü£';
            else line_field+='üîµ';
        }
        console.log(line_field);

    }

}